#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generate bilingual (CN/EN) PDF reports for GPS device accuracy analysis.

Inputs (precomputed by gps_device_accuracy_analysis.py):
- gps_accuracy_analysis/gps_analysis_res/<DEVICE>/device_overall.csv
- plots under gps_accuracy_analysis/gps_analysis_res/<DEVICE>/plots/

Outputs:
- gps_accuracy_analysis/report/report_cn.pdf
- gps_accuracy_analysis/report/report_en.pdf

This script assembles summary metrics and plots into clean, readable PDFs.
"""
from __future__ import annotations

import os
from pathlib import Path
from typing import Dict, Any

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib.font_manager import FontProperties, findSystemFonts

try:
    import requests
except Exception:
    requests = None


ROOT = Path(__file__).resolve().parents[1] / "gps_accuracy_analysis"
RES_DIR = ROOT / "gps_analysis_res"
REPORT_DIR = ROOT / "report"
FONTS_DIR = REPORT_DIR / "fonts"


def ensure_dirs():
    REPORT_DIR.mkdir(parents=True, exist_ok=True)
    FONTS_DIR.mkdir(parents=True, exist_ok=True)


def find_or_fetch_cn_font() -> FontProperties | None:
    """Return a FontProperties for a CJK-capable font.
    Try system fonts first; if unavailable and network is accessible,
    download Source Han Sans SC Regular.
    """
    # 1) Try common CJK fonts on system
    candidates = [
        "NotoSansCJK", "SourceHanSans", "WenQuanYi", "SimHei", "Microsoft YaHei", "PingFang",
    ]
    for fpath in findSystemFonts() or []:
        lower = fpath.lower()
        if any(k.lower() in lower for k in candidates):
            try:
                return FontProperties(fname=fpath)
            except Exception:
                continue

    # 2) Download Source Han Sans SC Regular (if requests is available)
    if requests is None:
        return None
    url = (
        "https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/"
        "SimplifiedChinese/SourceHanSansSC-Regular.otf"
    )
    dst = FONTS_DIR / "SourceHanSansSC-Regular.otf"
    if not dst.exists():
        try:
            r = requests.get(url, timeout=60)
            r.raise_for_status()
            dst.write_bytes(r.content)
        except Exception:
            return None
    try:
        return FontProperties(fname=str(dst))
    except Exception:
        return None


def load_device_metrics(device_id: str) -> Dict[str, Any]:
    ddir = RES_DIR / device_id
    overall_csv = ddir / "device_overall.csv"
    if not overall_csv.exists():
        raise FileNotFoundError(f"Missing metrics: {overall_csv}")
    df = pd.read_csv(overall_csv)
    # Rows of interest: raw, HDOPle300
    def pick(subset: str) -> Dict[str, Any]:
        row = df[df["subset"] == subset]
        if row.empty:
            return {}
        r = row.iloc[0]
        return {
            "n_fixes": int(r.get("n_fixes", 0)),
            "Mean_Error_m": float(r.get("Mean_Error_m", float("nan"))),
            "CEP50_m": float(r.get("CEP50_m", float("nan"))),
            "CEP95_m": float(r.get("CEP95_m", float("nan"))),
            "2DRMS_m": float(r.get("2DRMS_m", float("nan"))),
        }

    return {
        "raw": pick("raw"),
        "HDOPle300": pick("HDOPle300"),
        "plots": {
            "hist": ddir / "plots" / f"{device_id}_raw_hist.png",
            "scatter": ddir / "plots" / f"{device_id}_raw_scatter_vs_true.png",
            "box": ddir / "plots" / f"{device_id}_raw_hdop_vs_error_boxplot.png",
        },
    }


def draw_title_page(pdf: PdfPages, title: str, subtitle: str, font: FontProperties | None = None):
    fig = plt.figure(figsize=(8.27, 11.69))  # A4 portrait in inches
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    kw = dict(fontproperties=font) if font else {}
    ax.text(0.5, 0.7, title, ha='center', va='center', fontsize=24, weight='bold', **kw)
    ax.text(0.5, 0.63, subtitle, ha='center', va='center', fontsize=12, color='#555', **kw)
    ax.text(0.5, 0.2, "Generated by Animal Data Analysis Tools", ha='center', va='center', fontsize=10, color='#888')
    pdf.savefig(fig)
    plt.close(fig)


def draw_summary_page_cn(pdf: PdfPages, m171: Dict[str, Any], m172: Dict[str, Any], font: FontProperties | None):
    fig = plt.figure(figsize=(8.27, 11.69))
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    kw = dict(fontproperties=font) if font else {}

    ax.text(0.08, 0.94, "GPS设备精度测试报告（简版）", fontsize=18, weight='bold', **kw)

    # Conclusion
    ax.text(0.08, 0.88, "结论", fontsize=14, weight='bold', **kw)
    concl = (
        "两台设备在静止测试中的水平定位精度均为米级；"
        "GPS171 的整体精度明显优于 GPS172。"
    )
    ax.text(0.08, 0.84, concl, fontsize=12, **kw)

    # Headline metrics
    ax.text(0.08, 0.78, "核心指标（全部数据）", fontsize=14, weight='bold', **kw)
    ax.text(0.09, 0.74,
            f"GPS171（n={m171['raw'].get('n_fixes',0)}）\n"
            f"  平均误差：{m171['raw'].get('Mean_Error_m', float('nan')):.1f} m\n"
            f"  一半点位在 {m171['raw'].get('CEP50_m', float('nan')):.1f} m 内（CEP50）\n"
            f"  95% 在 {m171['raw'].get('CEP95_m', float('nan')):.1f} m 内（CEP95）\n"
            f"  2DRMS：{m171['raw'].get('2DRMS_m', float('nan')):.1f} m",
            fontsize=12, **kw)
    ax.text(0.52, 0.74,
            f"GPS172（n={m172['raw'].get('n_fixes',0)}）\n"
            f"  平均误差：{m172['raw'].get('Mean_Error_m', float('nan')):.1f} m\n"
            f"  一半点位在 {m172['raw'].get('CEP50_m', float('nan')):.1f} m 内（CEP50）\n"
            f"  95% 在 {m172['raw'].get('CEP95_m', float('nan')):.1f} m 内（CEP95）\n"
            f"  2DRMS：{m172['raw'].get('2DRMS_m', float('nan')):.1f} m",
            fontsize=12, **kw)

    # Good signal
    ax.text(0.08, 0.60, "良好信号（HDOP≤3.0）", fontsize=14, weight='bold', **kw)
    ax.text(0.09, 0.56,
            f"GPS171：平均误差 {m171['HDOPle300'].get('Mean_Error_m', float('nan')):.1f} m，"
            f"95% 在 {m171['HDOPle300'].get('CEP95_m', float('nan')):.1f} m 内",
            fontsize=12, **kw)
    ax.text(0.09, 0.52,
            f"GPS172：平均误差 {m172['HDOPle300'].get('Mean_Error_m', float('nan')):.1f} m，"
            f"95% 在 {m172['HDOPle300'].get('CEP95_m', float('nan')):.1f} m 内",
            fontsize=12, **kw)

    # Why 171 better (user-optimizable)
    ax.text(0.08, 0.46, "为什么 GPS171 更好（要点，可优化）", fontsize=14, weight='bold', **kw)
    bullets = [
        "更好的卫星几何/信号质量（低 HDOP 占比更高）。",
        "安装与环境：尽量开阔天空、远离金属与墙面，减少遮挡与多路径反射。",
        "天线朝上固定，避免贴近身体或地面；保持设备稳定以减少噪声。",
        "采集前预热1–2分钟；遇到高 HDOP 时可延迟采集或换位置。",
        "后处理建议：过滤 HDOP>3.0（本项目使用 HDOP×100，即阈值≤300），去除零经纬度点。",
    ]
    y = 0.42
    for b in bullets:
        ax.text(0.09, y, f"• {b}", fontsize=12, **kw)
        y -= 0.04

    pdf.savefig(fig)
    plt.close(fig)


def draw_summary_page_en(pdf: PdfPages, m171: Dict[str, Any], m172: Dict[str, Any]):
    fig = plt.figure(figsize=(8.27, 11.69))
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')

    ax.text(0.08, 0.94, "GPS Device Accuracy Report (Brief)", fontsize=18, weight='bold')

    # Conclusion
    ax.text(0.08, 0.88, "Conclusion", fontsize=14, weight='bold')
    concl = (
        "Both devices achieve meter-level horizontal accuracy in static tests; "
        "GPS171 clearly outperforms GPS172."
    )
    ax.text(0.08, 0.84, concl, fontsize=12)

    # Headline metrics
    ax.text(0.08, 0.78, "Headline Metrics (All Data)", fontsize=14, weight='bold')
    ax.text(0.09, 0.74,
            f"GPS171 (n={m171['raw'].get('n_fixes',0)})\n"
            f"  Mean: {m171['raw'].get('Mean_Error_m', float('nan')):.1f} m\n"
            f"  50% within {m171['raw'].get('CEP50_m', float('nan')):.1f} m (CEP50)\n"
            f"  95% within {m171['raw'].get('CEP95_m', float('nan')):.1f} m (CEP95)\n"
            f"  2DRMS: {m171['raw'].get('2DRMS_m', float('nan')):.1f} m",
            fontsize=12)
    ax.text(0.52, 0.74,
            f"GPS172 (n={m172['raw'].get('n_fixes',0)})\n"
            f"  Mean: {m172['raw'].get('Mean_Error_m', float('nan')):.1f} m\n"
            f"  50% within {m172['raw'].get('CEP50_m', float('nan')):.1f} m\n"
            f"  95% within {m172['raw'].get('CEP95_m', float('nan')):.1f} m\n"
            f"  2DRMS: {m172['raw'].get('2DRMS_m', float('nan')):.1f} m",
            fontsize=12)

    # Good signal
    ax.text(0.08, 0.60, "Good Signal (HDOP ≤ 3.0)", fontsize=14, weight='bold')
    ax.text(0.09, 0.56,
            f"GPS171: Mean {m171['HDOPle300'].get('Mean_Error_m', float('nan')):.1f} m, "
            f"95% within {m171['HDOPle300'].get('CEP95_m', float('nan')):.1f} m",
            fontsize=12)
    ax.text(0.09, 0.52,
            f"GPS172: Mean {m172['HDOPle300'].get('Mean_Error_m', float('nan')):.1f} m, "
            f"95% within {m172['HDOPle300'].get('CEP95_m', float('nan')):.1f} m",
            fontsize=12)

    # Why 171 better (user-optimizable)
    ax.text(0.08, 0.46, "Why GPS171 Performs Better (Actionable)", fontsize=14, weight='bold')
    bullets = [
        "Stronger satellite geometry/signal quality (more low-HDOP fixes).",
        "Mounting & environment: open sky, away from metal/walls, less obstruction/multipath.",
        "Keep antenna facing sky and stable; avoid close contact with body/ground.",
        "Warm up for 1–2 minutes; when HDOP is high, pause or move to a clearer spot.",
        "Post-process with HDOP filtering (e.g., ≤3.0; this project uses HDOP×100 thresholds).",
    ]
    y = 0.42
    for b in bullets:
        ax.text(0.09, y, f"• {b}", fontsize=12)
        y -= 0.04

    pdf.savefig(fig)
    plt.close(fig)


def draw_gallery_pages(pdf: PdfPages, device_id: str, plots: Dict[str, Path], title_prefix: str,
                       cn_font: FontProperties | None = None, lang: str = 'en'):
    kw = dict(fontproperties=cn_font) if (lang == 'cn' and cn_font) else {}

    # Page 1: histogram + scatter
    fig = plt.figure(figsize=(8.27, 11.69))
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    ax.text(0.08, 0.96, f"{title_prefix} - 概览" if lang == 'cn' else f"{title_prefix} - Overview",
            fontsize=16, weight='bold', **kw)
    # Left image
    if plots.get("hist") and plots["hist"].exists():
        img = plt.imread(str(plots["hist"]))
        ax_img = fig.add_axes([0.08, 0.50, 0.38, 0.38])
        ax_img.imshow(img)
        ax_img.axis('off')
    # Right image
    if plots.get("scatter") and plots["scatter"].exists():
        img = plt.imread(str(plots["scatter"]))
        ax_img2 = fig.add_axes([0.54, 0.50, 0.38, 0.38])
        ax_img2.imshow(img)
        ax_img2.axis('off')
    # Caption
    cap = (
        "左：误差分布直方图；右：GPS 点与均值位置对比。"
        if lang == 'cn' else
        "Left: error histogram; right: GPS points vs mean center."
    )
    ax.text(0.08, 0.44, cap, fontsize=11, color='#555', **kw)
    pdf.savefig(fig)
    plt.close(fig)

    # Page 2: HDOP boxplot
    fig = plt.figure(figsize=(8.27, 11.69))
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    ax.text(0.08, 0.96, f"{title_prefix} - 信号质量对误差的影响" if lang == 'cn' else f"{title_prefix} - Error vs Signal Quality",
            fontsize=16, weight='bold', **kw)
    if plots.get("box") and plots["box"].exists():
        img = plt.imread(str(plots["box"]))
        ax_img = fig.add_axes([0.08, 0.10, 0.84, 0.8])
        ax_img.imshow(img)
        ax_img.axis('off')
    cap = (
        "箱线图：按 HDOP 阈值（×100）分组（≤100、≤200、…、>500），为累积关系。"
        if lang == 'cn' else
        "Boxplot: cumulative HDOP groups (×100): ≤100, ≤200, …, >500."
    )
    ax.text(0.08, 0.05, cap, fontsize=11, color='#555', **kw)
    pdf.savefig(fig)
    plt.close(fig)


def build_reports():
    ensure_dirs()
    cn_font = find_or_fetch_cn_font()

    m171 = load_device_metrics("GPS171")
    m172 = load_device_metrics("GPS172")

    # Chinese report
    with PdfPages(str(REPORT_DIR / "report_cn.pdf")) as pdf:
        draw_title_page(pdf, "GPS设备精度测试报告", "GPS171 vs GPS172（静止测试）", cn_font)
        draw_summary_page_cn(pdf, m171, m172, cn_font)
        draw_gallery_pages(pdf, "GPS171", m171["plots"], "GPS171", cn_font, lang='cn')
        draw_gallery_pages(pdf, "GPS172", m172["plots"], "GPS172", cn_font, lang='cn')

    # English report
    with PdfPages(str(REPORT_DIR / "report_en.pdf")) as pdf:
        draw_title_page(pdf, "GPS Accuracy Test Report", "GPS171 vs GPS172 (Static Test)")
        draw_summary_page_en(pdf, m171, m172)
        draw_gallery_pages(pdf, "GPS171", m171["plots"], "GPS171", None, lang='en')
        draw_gallery_pages(pdf, "GPS172", m172["plots"], "GPS172", None, lang='en')

    print(f"[OK] Reports saved to: {REPORT_DIR}")


if __name__ == "__main__":
    build_reports()

